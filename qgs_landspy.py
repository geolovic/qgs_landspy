# -*- coding: utf-8 -*-
"""
/***************************************************************************
 QgsTopopy
                                 A QGIS plugin
 Topographic analysis with QGIS 
 Generated by Plugin Builder: http://g-sherman.github.io/Qgis-Plugin-Builder/
                              -------------------
        begin                : 2022-06-23
        git sha              : $Format:%H$
        copyright            : (C) 2022 by J. Vicente PÃ©rez
        email                : vperez@go.ugr.es
 ***************************************************************************/

/***************************************************************************
 *                                                                         *
 *   This program is free software; you can redistribute it and/or modify  *
 *   it under the terms of the GNU General Public License as published by  *
 *   the Free Software Foundation; either version 2 of the License, or     *
 *   (at your option) any later version.                                   *
 *                                                                         *
 ***************************************************************************/
"""
# Check for the landspy module
import os
from qgis.PyQt.QtCore import QSettings, QTranslator, QCoreApplication
from qgis.PyQt.QtGui import QIcon
from qgis.PyQt.QtWidgets import QAction
from qgis.core import QgsApplication

# Initialize Qt resources from file resources.py
from .resources import *
# Import the code for the dialog
from .profiler_dialog import ProfilerWindow
from .hcurve_dialog import HypsometricWindow
from .qgs_landspy_provider import QgsTopopyProvider


class QgsLandspy:
    """QGIS Plugin Implementation."""

    def __init__(self, iface):
        """
        Constructor.

        :param iface: QgsInterface. An interface instance to manipulate the QGIS application at run time.
        """
        # Save reference to the QGIS interface
        self.iface = iface
        # initialize plugin directory
        self.plugin_dir = os.path.realpath(os.path.dirname(__file__)) + "/"
        # Reference to active Plugin window
        self.appWindow = None
        self.menu = '&Landspy'

    def initGui(self):
        """Create the menu entries and toolbar icons inside the QGIS GUI."""
        # Add profiler
        profiler_icon = ':/plugins/qgs_topopy/icons/long_prof.png'
        hypsometry_icon = ':/plugins/qgs_topopy/icons/calhypso.png'
        self.profAction = QAction(QIcon(profiler_icon), "Profiler", self.iface.mainWindow())
        self.hypsoAction = QAction(QIcon(hypsometry_icon), "Hypsometry", self.iface.mainWindow())
        self.profAction.triggered.connect(self.run_profiler)
        self.hypsoAction.triggered.connect(self.run_hypsometry)
        self.iface.addToolBarIcon(self.profAction)
        self.iface.addToolBarIcon(self.hypsoAction)
        self.iface.addPluginToMenu(self.menu, self.profAction)
        self.provider = QgsTopopyProvider()
        QgsApplication.processingRegistry().addProvider(self.provider)

    def unload(self):
        """Removes the plugin menu item and icon from QGIS GUI."""
        # Remove Profiler
        self.iface.removePluginMenu(self.menu, self.profAction)
        self.iface.removeToolBarIcon(self.profAction)
        self.iface.removeToolBarIcon(self.hypsoAction)
        QgsApplication.processingRegistry().removeProvider(self.provider)

    def run_profiler(self):
        """Runs the Profiler application"""
        if not self.appWindow:
            self.appWindow = ProfilerWindow(parent=self.iface.mainWindow(), iface=self.iface, app_path=self.plugin_dir)
            self.appWindow.window_closed.connect(self.cleaning)
            self.appWindow.show()

    def run_hypsometry(self):
        """Runs the Hypsometry application"""

        if not self.appWindow:
            self.appWindow = HypsometricWindow(parent=self.iface.mainWindow(), iface=self.iface,
                                               app_path=self.plugin_dir)
            self.appWindow.window_closed.connect(self.cleaning)
            self.appWindow.show()

    def cleaning(self):
        """Cleaning"""
        # The appWindow has been closed
        # Clear the reference to self.appWindow
        self.appWindow = None
