from qgis.PyQt.QtCore import QCoreApplicationfrom qgis.core import QgsProcessingAlgorithm, QgsProcessingParameterFile, QgsProcessingParameterVectorDestination, QgsProcessingParameterNumberfrom landspy import DEM, Flow, Grid, Networkfrom qgis import processingclass ChiMap(QgsProcessingAlgorithm):    # Constants used to refer to parameters and outputs They will be    # used when calling the algorithm from another algorithm, or when    # calling from the QGIS console.    NET = 'NET'    CHI_SHP = 'CHI_SHP'    DIST = 'DIST'     def __init__(self):        super().__init__()    def createInstance(self):        return type(self)()     def name(self):        """        Rerturns the algorithm name, used to identify the algorithm.        Must be unique within each provider and should contain lowercase alphanumeric characters only.        """        return "chiMap"         def displayName(self):        """        Returns the translated algorithm name, which should be used for any        user-visible display of the algorithm name.        """        return self.tr("Chi Shapefile")         def groupId(self):        """        Returns the unique ID of the group this algorithm belongs to.        """        return "geomorphic_indexes"    def group(self):        """        Returns the name of the group this algoritm belongs to.        """        return self.tr("Geomorphic Indexes")    def shortHelpString(self):        """        Returns a localised short helper string for the algorithm.         """        texto = """                    This script creates a polyline Chi shapefile                    Network : Network object (.dat)                    Distance : Segment distance to calculate ksn, slope, Chi, etc.                     Chi shapefile :  Line shapefile with Chi metrics (ksn, area, slope, etc.)                    """        return texto     def tr(self, string):        return QCoreApplication.translate('Processing', string)    def helpUrl(self):        return "https://github.com/geolovic/qgs_landspy"             def initAlgorithm(self, config=None):        """        Here we define the inputs and output of the algorithm, along        with some other properties.        """        self.addParameter(QgsProcessingParameterFile(self.NET, self.tr("Network (.dat)"), extension = "dat"))        self.addParameter(QgsProcessingParameterNumber(self.DIST, self.tr("Segment distance"), type=QgsProcessingParameterNumber.Double))        self.addParameter(QgsProcessingParameterVectorDestination(self.CHI_SHP, self.tr("Chi Shapefile")))     def processAlgorithm(self, parameters, context, feedback):        """        Here is where the processing itself takes place.        """        input_net = self.parameterAsFile(parameters, self.NET, context)        distance = self.parameterAsDouble(parameters, self.DIST, context)        out_shp = self.parameterAsOutputLayer(parameters, self.CHI_SHP, context)        net = Network(input_net)        net.chiShapefile(out_shp, distance)                results = {self.CHI_SHP : out_shp}        return results