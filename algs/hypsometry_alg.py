<<<<<<< HEAD
from qgis.PyQt.QtCore import QCoreApplicationfrom qgis.core import QgsProcessingAlgorithm, QgsProcessingParameterRasterLayer, QgsProcessingParameterFileDestinationfrom qgis.core import QgsProcessingParameterFile, QgsProcessingParameterEnumfrom landspy import DEM, Grid, HCurvefrom qgis import processingimport numpy as npclass HypsometricCurves(QgsProcessingAlgorithm):    # Constants used to refer to parameters and outputs They will be    # used when calling the algorithm from another algorithm, or when    # calling from the QGIS console.    INPUT_DEM = 'INPUT_DEM'    BASINS = 'BASINS'    OUT_CURVES = 'OUT_CURVES'    NAMES = "NAMES"    def __init__(self):        super().__init__()    def createInstance(self):        return type(self)()     def name(self):        """        Rerturns the algorithm name, used to identify the algorithm.        Must be unique within each provider and should contain lowercase alphanumeric characters only.        """        return "hypsometricCurves"         def displayName(self):        """        Returns the translated algorithm name, which should be used for any        user-visible display of the algorithm name.        """        return self.tr("Get Hypsometric Curves")        def groupId(self):        """        Returns the unique ID of the group this algorithm belongs to.        """        return "geomorphic_indexes"    def group(self):        """        Returns the name of the group this algoritm belongs to.        """        return self.tr("Geomorphic Indexes")    def shortHelpString(self):        """        Returns a localised short helper string for the algorithm.         """        texto = """                    This script creates a Network object (*.dat file).                    DEM : Input Digital Elevation Model                    Basins: Raster with the drainage basins.                     Output Hypsometric Curves (*.npy): Output file with the hypsometric curves                    """        return texto     def tr(self, string):        return QCoreApplication.translate('Processing', string)    def helpUrl(self):        return "https://github.com/geolovic/qgs_landspy"             def initAlgorithm(self, config=None):        """        Here we define the inputs and output of the algorithm, along        with some other properties.        """        self.addParameter(QgsProcessingParameterRasterLayer(self.INPUT_DEM,  self.tr("DEM")))        self.addParameter(QgsProcessingParameterRasterLayer(self.BASINS, self.tr("Basins")))        self.addParameter(QgsProcessingParameterFileDestination(self.OUT_CURVES, self.tr("Hypsometric Curves")))        self.addParameter(QgsProcessingParameterFile(self.NAMES, self.tr("Basin Names"), defaultValue="", optional=True))     def processAlgorithm(self, parameters, context, feedback):        """        Here is where the processing itself takes place.        """        input_dem = self.parameterAsRasterLayer(parameters, self.INPUT_DEM, context)        input_basins = self.parameterAsRasterLayer(parameters, self.BASINS, context)        names_file = self.parameterAsString(parameters, self.NAMES, context)        out_curves = self.parameterAsString(parameters, self.OUT_CURVES, context)        dem = DEM(input_dem.source())        basins = Grid(input_basins.source())        nodata = basins.getNodata()        bids = np.unique(basins.readArray()).tolist()        bids.remove(nodata)        if names_file:            try:                names = {}                infile = open(names_file)                for linea in infile:                    data = linea.split(";")                    names[int(data[0])] = data[1]            except:                feedback.setProgressText("Wrong names file!!, using ids as names...")                names = {}                for bid in bids:                    names[bid] = str(bid)        curvas = []        for bid in bids:            curva = HCurve(dem, basins, bid=bid, name=names[bid])            curvas.append(curva)        curvas = np.array(curvas)        np.save(out_curves, curvas, allow_pickle=True)        results = {self.OUT_CURVES: out_curves}        return results
=======
from qgis.PyQt.QtCore import QCoreApplicationfrom qgis.core import QgsProcessingAlgorithm, QgsProcessingParameterRasterLayer, QgsProcessingParameterFileDestinationfrom qgis.core import QgsProcessingParameterFile, QgsProcessingParameterEnumfrom landspy import DEM, Grid, HCurvefrom qgis import processingimport numpy as npclass HypsometricCurves(QgsProcessingAlgorithm):    # Constants used to refer to parameters and outputs They will be    # used when calling the algorithm from another algorithm, or when    # calling from the QGIS console.    INPUT_DEM = 'INPUT_DEM'    BASINS = 'BASINS'    OUT_CURVES = 'OUT_CURVES'    NAMES = "NAMES"    def __init__(self):        super().__init__()    def createInstance(self):        return type(self)()     def name(self):        """        Rerturns the algorithm name, used to identify the algorithm.        Must be unique within each provider and should contain lowercase alphanumeric characters only.        """        return "hypsometricCurves"         def displayName(self):        """        Returns the translated algorithm name, which should be used for any        user-visible display of the algorithm name.        """        return self.tr("Get Hypsometric Curves")        def groupId(self):        """        Returns the unique ID of the group this algorithm belongs to.        """        return "geomorphic_indexes"    def group(self):        """        Returns the name of the group this algoritm belongs to.        """        return self.tr("Geomorphic Indexes")    def shortHelpString(self):        """        Returns a localised short helper string for the algorithm.         """        texto = """                    This script creates a Network object (*.dat file).                    DEM : Input Digital Elevation Model                    Basins: Raster with the drainage basins.                     Output Hypsometric Curves (*.npy): Output file with the hypsometric curves                    """        return texto     def tr(self, string):        return QCoreApplication.translate('Processing', string)    def helpUrl(self):        return "https://github.com/geolovic/qgs_landspy"             def initAlgorithm(self, config=None):        """        Here we define the inputs and output of the algorithm, along        with some other properties.        """        self.addParameter(QgsProcessingParameterRasterLayer(self.INPUT_DEM,  self.tr("DEM")))        self.addParameter(QgsProcessingParameterRasterLayer(self.BASINS, self.tr("Basins")))        self.addParameter(QgsProcessingParameterFileDestination(self.OUT_CURVES, self.tr("Hypsometric Curves")))        self.addParameter(QgsProcessingParameterFile(self.NAMES, self.tr("Basin Names"), defaultValue="", optional=True))     def processAlgorithm(self, parameters, context, feedback):        """        Here is where the processing itself takes place.        """        input_dem = self.parameterAsRasterLayer(parameters, self.INPUT_DEM, context)        input_basins = self.parameterAsRasterLayer(parameters, self.BASINS, context)        names_file = self.parameterAsString(parameters, self.NAMES, context)        out_curves = self.parameterAsString(parameters, self.OUT_CURVES, context)        dem = DEM(input_dem.source())        basins = Grid(input_basins.source())        nodata = basins.getNodata()        bids = np.unique(basins.readArray()).tolist()        bids.remove(nodata)        if names_file:            try:                names = {}                infile = open(names_file)                for linea in infile:                    data = linea.split()                    names[int(data[0])] = data[1]            except:                feedback.setProgressText("Wrong names file!!, using ids as names...")                names = {}                for bid in bids:                    names[bid] = str(bid)        curvas = []        for bid in bids:            curva = HCurve(dem, basins, bid=bid, name=names[bid])            curvas.append(curva)        curvas = np.array(curvas)        np.save(out_curves, curvas, allow_pickle=True)        results = {self.OUT_CURVES: out_curves}        return results
>>>>>>> origin/master
