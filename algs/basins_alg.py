# -*- coding: utf-8 -*-from qgis.PyQt.QtCore import QCoreApplicationfrom qgis.core import QgsProcessingAlgorithm, QgsProcessingParameterRasterLayer, QgsProcessingParameterRasterDestinationfrom qgis.core import QgsProcessing, QgsProcessingParameterField, QgsProcessingParameterFeatureSourcefrom landspy import DEM, Flowfrom qgis import processingimport numpy as npclass DrainageBasins(QgsProcessingAlgorithm):    # Constants used to refer to parameters and outputs They will be    # used when calling the algorithm from another algorithm, or when    # calling from the QGIS console.    INPUT_FD = 'INPUT_FD'    POUR_POINTS = 'POUR_POINTS'    ID_FIELD = 'ID_FIELD'    BASINS = 'BASINS'     def __init__(self):        super().__init__()    def createInstance(self):        return type(self)()     def name(self):        """        Rerturns the algorithm name, used to identify the algorithm.        Must be unique within each provider and should contain lowercase alphanumeric characters only.        """        return "basin"         def displayName(self):        """        Returns the translated algorithm name, which should be used for any        user-visible display of the algorithm name.        """        return self.tr("Drainage Basins")         def groupId(self):        """        Returns the unique ID of the group this algorithm belongs to.        """        return "drainage_net_processing"    def group(self):        """        Returns the name of the group this algoritm belongs to.        """        return self.tr("Drainage Network Processing")    def shortHelpString(self):        """        Returns a localised short helper string for the algorithm.         """        texto = """                    This script extract drainage basins for the input pour points                    Flow Direction: Input Flow Direction Raster                    Pour points: Pour points of the drainage basins. Will be snapped to the closest channel cell (threshold = number of cells * 0.0025).                    Id field: Field with the basin ids                    Drainage Basins : Output drainage basins (raster)                    """        return texto     def tr(self, string):        return QCoreApplication.translate('Processing', string)    def helpUrl(self):        return "https://github.com/geolovic/qgs_landspy"             def initAlgorithm(self, config=None):        """        Here we define the inputs and output of the algorithm, along        with some other properties.        """        self.addParameter(QgsProcessingParameterRasterLayer(self.INPUT_FD, self.tr("Flow Direction")))        self.addParameter(QgsProcessingParameterFeatureSource(self.POUR_POINTS, self.tr("Pour Points"), [QgsProcessing.TypeVectorPoint]))        self.addParameter(QgsProcessingParameterField(self.ID_FIELD, self.tr("Id Field"), parentLayerParameterName=self.POUR_POINTS, type=QgsProcessingParameterField.Numeric, optional=True))        self.addParameter(QgsProcessingParameterRasterDestination(self.BASINS, self.tr("Output Drainage Basins")))     def processAlgorithm(self, parameters, context, feedback):        """        Here is where the processing itself takes place.        """        input_fd = self.parameterAsRasterLayer(parameters, self.INPUT_FD, context)        pour_points = self.parameterAsVectorLayer(parameters, self.POUR_POINTS, context)        id_field = self.parameterAsString(parameters, self.ID_FIELD, context)        output_basins = self.parameterAsOutputLayer(parameters, self.BASINS, context)                fd = Flow(input_fd.source())        th = int(fd.getNCells() * 0.0025)        field_idx = pour_points.fields().indexFromName(id_field)        puntos = []        for n, feat in enumerate(pour_points.getFeatures()):            if field_idx >= 0:                idx = feat[field_idx]            else:                idx = n + 1            pto = feat.geometry().asPoint()            puntos.append([pto.x(), pto.y(), idx])                    puntos = np.array(puntos)        snap_p = fd.snapPoints(puntos, th, "channel")        basins = fd.drainageBasins(snap_p)        basins.save(output_basins)                results = {self.BASINS : output_basins}        return results