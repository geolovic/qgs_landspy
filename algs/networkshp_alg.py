from qgis.PyQt.QtCore import QCoreApplicationfrom qgis.core import QgsProcessingAlgorithm, QgsProcessingParameterRasterLayer, QgsProcessingParameterFile, QgsProcessingParameterBoolean, QgsProcessingParameterVectorDestinationfrom landspy import Networkfrom qgis import processingclass NetworkShapefile(QgsProcessingAlgorithm):    # Constants used to refer to parameters and outputs They will be    # used when calling the algorithm from another algorithm, or when    # calling from the QGIS console.    NET = 'NET'    OUT_NETWORK = 'OUT_NETWORK'    CON = 'CON'     def __init__(self):        super().__init__()    def createInstance(self):        return type(self)()     def name(self):        """        Rerturns the algorithm name, used to identify the algorithm.        Must be unique within each provider and should contain lowercase alphanumeric characters only.        """        return "networkShapefile"         def displayName(self):        """        Returns the translated algorithm name, which should be used for any        user-visible display of the algorithm name.        """        return self.tr("Network Shapefile")         def groupId(self):        """        Returns the unique ID of the group this algorithm belongs to.        """        return "drainage_net_processing"    def group(self):        """        Returns the name of the group this algoritm belongs to.        """        return self.tr("Drainage Network Processing")    def shortHelpString(self):        """        Returns a localised short helper string for the algorithm.         """        texto = """                    This script creates a vector drainage network from a Network object (*.dat).                    Network : Input Network object (*.dat file)                    Continuous : Continuous channels. If checked, lines of the same channel with the equal order will be merged. If not, lines will break at confluences.                    Drainage Network: Output vector drainage network.                    """        return texto     def tr(self, string):        return QCoreApplication.translate('Processing', string)    def helpUrl(self):        return "https://github.com/geolovic/qgs_landspy"             def initAlgorithm(self, config=None):        """        Here we define the inputs and output of the algorithm, along        with some other properties.        """        self.addParameter(QgsProcessingParameterFile(self.NET, self.tr("Input Network"), extension="dat"))        self.addParameter(QgsProcessingParameterBoolean(self.CON, self.tr("Continous channels"), defaultValue=True, optional=True))        self.addParameter(QgsProcessingParameterVectorDestination(self.OUT_NETWORK, self.tr("Drainage Network shapefile")))     def processAlgorithm(self, parameters, context, feedback):        """        Here is where the processing itself takes place.        """        input_net = self.parameterAsString(parameters, self.NET, context)        con = self.parameterAsBool(parameters, self.CON, context)        out_shp = self.parameterAsOutputLayer(parameters, self.OUT_NETWORK, context)        net = Network(input_net)        net.exportShp(out_shp, con)        results = {self.OUT_NETWORK : out_shp}        return results